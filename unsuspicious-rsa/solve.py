from gmpy2 import iroot
from Crypto.Util.number import long_to_bytes
from math import factorial

N = 172391551927761576067659307357620721422739678820495774305873584621252712399496576196263035396006999836369799931266873378023097609967946749267124740589901094349829053978388042817025552765214268699484300142561454883219890142913389461801693414623922253012031301348707811702687094437054617108593289186399175149061
n = factorial(90)
c = 128185847052386409377183184214572579042527531775256727031562496105460578259228314918798269412725873626743107842431605023962700973103340370786679287012472752872015208333991822872782385473020628386447897357839507808287989016150724816091476582807745318701830009449343823207792128099226593723498556813015444306241

a = N % n # => a = p % n
# q = p + n - a + 1 + k * n and k is a small number
# So p * q = N is equivilent to p * (p + n - a + 1 + k * n). This is a quadratic equation

def brute_force():
    for i in range(1, 5000):
        b = n - a + 1 + i * n
        delta = iroot(b*b + 4*N, 2)
        if delta[1] == True:
            p = (-b + delta[0]) // 2
            q = N // p
            assert p * q == N
            d = pow(65537, -1, N - p - q +1)
            flag = pow(c, d, N)
            print(long_to_bytes(flag).decode())
            break

brute_force()
